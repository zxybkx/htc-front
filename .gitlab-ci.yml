image: registry.cn-hangzhou.aliyuncs.com/choerodon-tools/cifront:0.7.0

stages:
  - node_build
  - docker_build

node_build:
  image: registry.cn-hangzhou.aliyuncs.com/hzero-cli/cifront:0.0.1 # 正常打包
  # image: registry.hdsd.cn/operation-hdbsp-uat2/hdbsp-npm:1.0  # 离线打包
  stage: node_build
  script:
    - node_module
    - node_build
  only:
    - uat
    - tags
  except:
    - develop
    - /^feature-.*$/
    - /^release-.*$/
    - /^hotfix-.*$/

docker_build:
  image: registry.cn-hangzhou.aliyuncs.com/choerodon-tools/cibase:0.7.0
  stage: docker_build
  script:
    - docker_build
  only:
    - uat
    - tags
  except:
    - develop
    - /^feature-.*$/
    - /^release-.*$/
    - /^hotfix-.*$/

.auto_devops: &auto_devops |
  http_status_code=`curl -o .auto_devops.sh -s -m 10 --connect-timeout 10 -w %{http_code} "${CHOERODON_URL}/devops/ci?token=${Token}&type=front"`
  if [ "$http_status_code" != "200" ]; then
    cat .auto_devops.sh
    exit 1
  fi
  source .auto_devops.sh
  export TEMP_DIR=/cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-front
  echo "gitlab-ci -- 缓存目录: $TEMP_DIR"

  function restore_node_cache_and_build_cache(){
      echo "===: 恢复缓存"
  }

  function back_node_cache_and_build_cache(){
      echo "===: 缓存文件"
      mkdir -p $TEMP_DIR
      tar -zcf $TEMP_DIR/dist.tar.gz ./dist
      tar -zcf $TEMP_DIR/node_modules.tar.gz ./node_modules
  }

  function node_module(){
        restore_node_cache_and_build_cache
        if [ -f "./dist/.commitId" ]; then
          export LAST_BUILD_PARENT_GIT_HEAD=`cat ./dist/.commitId` # 获取上一次 build 父项目时的 提交代码版本
          export CURRENT_GIT_HEAD=`git log -1 --pretty=format:"%H"` # 获取当前提交代码版本
          export YARN_LOCK_CHANGE_LOG=`git diff $LAST_BUILD_PARENT_GIT_HEAD $CURRENT_GIT_HEAD  --shortstat -- yarn.lock` # 对比两次提交版本中的 yarn.lock 是否变化
          if [[ -n "$YARN_LOCK_CHANGE_LOG" ]] ;then
            # 如果 yarn.lock 发生变化, 需要更新缓存。
            echo -e "gitlab-ci -- yarn.lock 发生变化, 需要清除之前编译时留下来的缓存。\n\t $YARN_LOCK_CHANGE_LOG"
            export CLEAR_TEMP_DIR=true
            echo "==: yarn.lock 变更, 重新编译"
          else
            echo "==: 执行增量编译"
          fi
        else
          export CLEAR_TEMP_DIR=true
          echo "==: 第一次编译（非增量编译）"
        fi
        if  [[ $CLEAR_TEMP_DIR =~ "true" ]] ;then
          echo "==: 初始化缓存目录：$TEMP_DIR"
          rm -rf $TEMP_DIR
          echo "==: 开始安装依赖"
          node -v
          yarn config set ignore-engines true
          yarn install
          echo "==: 结束安装依赖"
        fi
        if [ ! -d "node_modules" ]; then
          yarn config set ignore-engines true
          yarn bootstrap
        fi
        npx hzero-cli info
    }
  export GROUP_NAME=htc
  export DOCKER_USER=User6371438
  export DOCKER_PWD=User6371438PWD

  function node_build(){
      echo "全量编译"
      yarn build:ms-all
      yarn run build:dep-all:prod
      yarn run build:app:prod
      echo "==: 编译完成"
      back_node_cache_and_build_cache
  }


  function docker_build(){
      # cp -r /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}/* ${1:-"."}
      tar -zxf $TEMP_DIR/dist.tar.gz
      docker login -u ${DOCKER_USER} -p ${DOCKER_PWD} ${DOCKER_REGISTRY}
      docker build --pull -t ${DOCKER_REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}:${CI_COMMIT_TAG} ${1:-"."}
      docker push ${DOCKER_REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}:${CI_COMMIT_TAG}
      echo "${DOCKER_REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}:${CI_COMMIT_TAG}"
  }

before_script:
  - *auto_devops
